#!/usr/bin/env ruby

require 'rokkin'
require 'thor'
require 'git'

class RokkinCLI < Thor
  desc "clone URL", "Clones the git repo located at URL into the current directory."
  option :sha
  option :path
  def clone(url)
    repo_name = url.split('/')[-1].chomp(".git")
    full_path = File.expand_path(options[:path] || repo_name)

    print "Cloning into #{full_path} ... "
    begin
      repo = Git.clone(url, full_path)
    rescue Git::GitExecuteError => e
      puts "error!"
      raise e
    end
    puts "done"

    if options[:sha]
      print "Checking out #{options[:sha]} ... "
      begin
        repo.checkout(options[:sha])
        puts "done"
      rescue Git::GitExecuteError => e
        puts "error!"
        puts e
        puts "Checking out HEAD and continuing on ..."
      end
    end

    containerize(full_path)
  end

  desc "containerize PATH", "Containerizes the ruby app located at PATH (defaults to the current directory)"
  option :force, :type => :boolean, :desc => "Overwrites any Dockerfile, Procfile, .env, or fig.yaml file in the destination."
  def containerize(path='.')
    full_path = File.expand_path(path)

    print "Containerizing #{full_path} ... "
    begin
      Rokkin.containerize(full_path, options)
      puts "done"
    rescue RokkinError => e
      puts "error!"

      if e.cause # This was caused by someone else (like FileUtils)
        raise e.cause
      else # Otherwise it's a RokkinError we raised, so just print that message
        puts e.message
        exit
      end
    end
  end
end

RokkinCLI.start(ARGV)
